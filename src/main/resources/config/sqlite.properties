# 自定义属性配置
# 默认路径从class路径，此时sqlite.uri可以写相对路径
sqlite.path.classpath=true
# 数据库路径
sqlite.uri=database/sqlite.db

# 自定义连接池配置
# 是否开启连接池，如果不用配置开启可以手动代码开启：SqliteConnectionPool.initConnectPoolThreads();
sqlite.connection.pool.enable=false
# 最大连接数
sqlite.connection.max=20
# 最少连接数
sqlite.connection.min=10
# 每次最大添加数
sqlite.connection.step=5
# 已分配连接的超时设置，超时会被回收
sqlite.connection.timeout=5000
# 连接池线程轮询间隔
sqlite.pool.thread.sleep=2000

# 用户名密码登陆支持
sqlite.username=
sqlite.password=


# 是否启用非自定义属性的自定义，下面这些属性是Sqlite或JDBC自带属性，一般有默认值，自定义请在专业选手陪同下，默认不启用
sqlite.config.enable=false
# 内置属性配置

#1. API连接配置
#open_mode //连接模式，参见类 SQLiteOpenMode

#shared_cache //是否共享缓存 true/false

#load_extension //是否允许加载扩展 true/false

#2. Sqlite数据库内置的配置
#cache_size //缓存大小 -N（整数） 标识可以缓存 N * 1024个字节

#case_sensitive_like //like查询是否忽略大小写 true/false

#count_changes //是否为INSERT，UPDATE和DELETE语句返回变更计数标记 true/false

#default_cache_size //默认缓存大小 默认为 -2000，即2048000个字节

#empty_result_callbacks //查询或更改空结果回调标志 true/false

#encoding //动态生成库的时候使用，不同编码的库无法附加 UTF-8、UTF-16、UTF-16le、UTF-16be

#foreign_keys //是否开启外键约束 true/false
#full_column_names //查询时是否按全名展示  true/false
 #1.如果结果有AS子句，则列的名称是AS子句的右侧。
 #2.如果结果是通用表达式，而不是源表列的名称，则结果的名称是表达式文本的副本。
 #3.如果short_column_names true，则结果的名称是不包含源表名前缀的源表列的名称：COLUMN。
 #4.如果编译short_column_names和full_column_names 都是false，则应用（2）。
 #5.结果列的名称是源表名和源列名的组合：TABLE.COLUMN

#fullsync //是否使用F_FULLFSYNC同步方法。fullfsync标志的默认值是关闭的。只有Mac OS X支持F_FULLFSYNC  true/false

#incremental_vacuum //附注引起多达N个页面从freelist中移除  N（整数）

#journal_mode //指示查询或设置与当前数据库连接关联的数据库的日志模式  DELETE | TRUNCATE | PERSIST | MEMORY | WAL | OFF

#journal_size_limit //限制事务或检查点之后留在文件系统中的回滚日志和WAL文件的大小 N（整数）

#legacy_file_format //是否使用最新的格式创建库 true/false

#locking_mode //修改或查询数据库连接锁定模式 NORMAL | EXCLUSIVE

#page_size //查询或设置数据库的页面大小 N 默认页面大小增加到4096字节

#max_page_count //数据库文件中的最大页数 N

#read_uncommited //是否选择READ UNCOMMITTED隔离 true/false

#recursive_triggers //true/false

#reverse_unordered_selects //启用时，会导致许多没有ORDER BY子句的SELECT语句按照与正常情况相反的顺序发出结果 true/false
#short_column_names //查询是否启用短命名 true/false 不推荐使用
#synchronous //同步标志设置 0 | OFF | 1 | NORMAL | 2 | FULL | 3 | EXTRA
 #（3）EXTRA同步就像FULL一样，除了在该日志未链接以在DELETE模式下提交事务之后，包含回滚日志的目录同步之外。如果提交紧跟在断电之后，则额外提供额外的耐久性。
 #（2）当同步为FULL（2）时，SQLite数据库引擎将使用VFS的xSync方法来确保在继续之前将所有内容安全地写入磁盘表面。这可确保操作系统崩溃或电源故障不会损坏数据库。完全同步非常安全，但速度也较慢。FULL是不在WAL模式下最常用的同步设置。
 #（1）当同步是NORMAL（1）时，SQLite数据库引擎仍然会在最关键时刻同步，但比在FULL模式下更少。在正常模式下，错误时间的电源故障可能会损坏数据库的机会非常小（但非零）。但在实践中，您更可能遭受灾难性磁盘故障或其他不可恢复的硬件故障。许多应用程序在WAL模式下选择NORMAL 。
 #（0）使用同步OFF（0），只要SQLite将数据交给操作系统，SQLite就会继续同步。如果运行SQLite的应用程序崩溃，则数据将是安全的，但如果在数据写入磁盘表面之前操作系统崩溃或计算机断电，数据库可能会损坏。另一方面，在同步关闭的情况下，提交可以快几个数量级。

#temp_store //零食存储设置 0 | DEFAULT | 1 | FILE | 2 | MEMORY
 #当temp_store为DEFAULT（0）时，编译时C预处理器宏 SQLITE_TEMP_STORE用于确定存储临时表和索引的位置。
 #当temp_store是MEMORY（2）时，临时表和索引被保存，就像它们是纯内存数据库内存一样。
 #当temp_store是FILE时（1）临时表和索引存储在文件中。
 #当FILE时，temp_store_directory编译指示可用于指定包含临时文件的目录 被指定。
 #当temp_store设置改变时，所有现有的临时表，索引，触发器和视图立即被删除。

#temp_store_directory //临时文件目录
#user_version //用户版本是一个整数，可供应用程序使用，SQLite不使用用户版本

#3. 其他属性
#transaction_mode //事务模式 0|DEFFERED, 1|IMMEDIATE, 2|EXCLUSIVE

#date_precision //时间存储的精度 0|SECONDS, 1|MILLISECONDS

#date_class //日期存储用的数据结构 0|INTEGER, 1|TEXT, 2|REAL

#date_string_format //日期格式化形式 默认 yyyy-MM-dd HH:mm:ss.SSS

#busy_timeout //超时时间 默认 3000